#! /bin/bash
###############################################################################
# deb-cryptlvm-nokvm
#
# automated install of remotely unlocked encrypted rootfs systems
# 
# Copyright (C) 2014 nipil (nipil@users.noreply.github.com)
# 
# This program is free software; you can redistribute it and/or
#Â modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
###############################################################################

###############################################################################
# load configuration file
#
source template.conf

###############################################################################
# show usage
#

dcn_usage()
{
	echo -ne "Usage: ${0} operation [args]\n" \
		"\tconfig\n" \
		"\tprereq\n" \
		"\tpartition\n" \
		"\tcrypt\n" \
		"\tlvm_create\n" \
		"\tmkfs\n" \
		"\tmount\n" \
		"\tbootstrap\n" \
		"\ttabsetup\n" \
		"\tumount\n" \
		"\tlvm_deactivate\n" \
		"\tlvm_destroy\n" \
		"\tusage\n"
}

###############################################################################
# dump loaded configuration
#

dcn_config()
{
	DCN="DCN_DISK DCN_FSTYPE DCN_VG_NAME \
		DCN_BOOTFS_SIZE DCN_ROOTFS_SIZE DCN_SWAP_SIZE \
		DCN_BOOTSTRAP_MIRROR DCN_BOOTSTRAP_ARCH DCN_BOOTSTRAP_RELEASE \
		DCN_INSTALL_RECOMMENDS DCN_INSTALL_ETCKEEPER DCN_HOST_NAME \
		DCN_HOST_IFACE DCN_HOST_IP DCN_HOST_MASK DCN_HOST_GW \
		DCN_SSH_PORT_PREBOOT DCN_SSH_PORT_BOOTED DCN_SSH_AUTHKEYS_SRCFILE"

	for i in ${DCN}; do
		echo "${i}=${!i}"
	done

	echo "DCN_PARTITIONS=("
	for i in ${DCN_PARTITIONS[@]}; do
		echo ${i}
	done
	echo ")"
}

###############################################################################
# verify that the required tools are available
#

dcn_prereq()
{
	PREREQ="parted mkfs.ext4 cryptsetup pvcreate vgcreate lvcreate mkswap \
		mkdir mount swapon chmod grep awk debootstrap chroot umount swapoff \
		vgchange"

	for i in ${PREREQ}; do
		j=`which ${i}`
		if [[ ! -x ${j} ]]; then
			echo "${i} not found"
			exit 1
		else
			echo "found ${i} at ${j}"
		fi
	done
}

###############################################################################
# partition physical disk
#

dcn_partition()
{
	parted -s /dev/${DCN_DISK} mklabel msdos

	parted -a optimal -s /dev/${DCN_DISK} \
		mkpart primary 1M ${DCN_BOOTFS_SIZE}

	parted -a optimal -s /dev/${DCN_DISK} \
		mkpart primary ${DCN_BOOTFS_SIZE} -- -1s

	parted -s /dev/${DCN_DISK} set 1 boot on

	parted -s --list
}

###############################################################################
# setup crypt block device
#

dcn_crypt()
{
	cryptsetup luksFormat /dev/${DCN_DISK}2
	cryptsetup luksOpen /dev/${DCN_DISK}2 ${DCN_DISK}2_crypt
}

###############################################################################
# setup lvm (physical volumes, volume group, and logical volumes)
#

dcn_lvm_create()
{
	pvcreate /dev/mapper/${DCN_DISK}2_crypt

	vgcreate ${DCN_VG_NAME} /dev/mapper/${DCN_DISK}2_crypt

	lvcreate -L ${DCN_ROOTFS_SIZE} \
		-n ${DCN_HOST_NAME}_rootfs ${DCN_VG_NAME}

	lvcreate -L ${DCN_SWAP_SIZE} \
		-n ${DCN_HOST_NAME}_swap ${DCN_VG_NAME}

	for i in ${DCN_PARTITIONS[@]}; do

		DCN_LV_NAME=`echo ${i} | awk -F, '{ print $1 }'`
		DCN_SIZE_TYPE=`echo ${i} | awk -F, '{ print $2 }'`
		DCN_SIZE_AMOUNT=`echo ${i} | awk -F, '{ print $3 }'`

		lvcreate --${DCN_SIZE_TYPE} ${DCN_SIZE_AMOUNT} \
			-n ${DCN_HOST_NAME}_${DCN_LV_NAME} ${DCN_VG_NAME}

	done

	lvdisplay -C
}

###############################################################################
# create filesystem on the volumes and paritions
#

dcn_mkfs()
{
	mkfs.ext4 -L ${DCN_HOST_NAME}_boot \
		/dev/${DCN_DISK}1

	mkfs.ext4 -L ${DCN_HOST_NAME}_rootfs \
		/dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_rootfs

	mkswap -L ${DCN_HOST_NAME}_swap \
		/dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_swap

	for i in ${DCN_PARTITIONS[@]}; do

		DCN_LV_NAME=`echo ${i} | awk -F, '{ print $1 }'`

		mkfs.ext4 -L ${DCN_HOST_NAME}_${DCN_LV_NAME} \
			/dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_${DCN_LV_NAME}

	done
}

###############################################################################
# mount filesystems
#

dcn_mount()
{
	DCN_PREFIX=/target

	swapon /dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_swap

	mkdir -p ${DCN_PREFIX}
	mount /dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_rootfs ${DCN_PREFIX}

	mkdir -p ${DCN_PREFIX}/boot
	mount /dev/${DCN_DISK}1 ${DCN_PREFIX}/boot

	for i in ${DCN_PARTITIONS[@]}; do

		DCN_LV_NAME=`echo ${i} | awk -F, '{ print $1 }'`
		DCN_MNTPOINT=`echo ${i} | awk -F, '{ print $4 }'`

		mkdir -p ${DCN_PREFIX}${DCN_MNTPOINT}
		mount /dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_${DCN_LV_NAME} \
			${DCN_PREFIX}${DCN_MNTPOINT}

	done

	mkdir -p ${DCN_PREFIX}/{dev,proc,sys}
	mount -o bind /dev ${DCN_PREFIX}/dev
	mount -t proc proc ${DCN_PREFIX}/proc
	mount -t sysfs sys ${DCN_PREFIX}/sys
}

###############################################################################
# install base debian system
#

dcn_bootstrap()
{
	DCN_PREFIX=/target

	debootstrap --arch=$DCN_BOOTSTRAP_ARCH \
		$DCN_BOOTSTRAP_RELEASE \
		$DCN_PREFIX \
		$DCN_BOOTSTRAP_MIRROR
}

###############################################################################
# setup fstab and crypttab
#

dcn_tabsetup()
{
	DCN_PREFIX=/target

	DCN_UUID=$( cryptsetup luksDump /dev/${DCN_DISK}2 \
		| grep UUID | awk '{ print $2 }' )

	echo "${DCN_DISK}2_crypt UUID=${DCN_UUID} none luks" \
		> ${DCN_PREFIX}/etc/crypttab

	( echo -e "#device mountpoint fstype options dump fsck\n
		/dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_swap \
			none swap sw 0 0\n
		/dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_rootfs / \
			${DCN_FSTYPE} defaults,noatime,errors=remount-ro 0 1\n
		/dev/${DCN_DISK}1 /boot ${DCN_FSTYPE} \
			defaults,noatime,nodev,nosuid,noexec 0 2"

	for i in ${DCN_PARTITIONS[@]}; do

		DCN_LV_NAME=$( echo ${i} | awk -F, '{ print $1 }' )
		DCN_MNTPOINT=$( echo ${i} | awk -F, '{ print $4 }' )

		echo "/dev/mapper/${DCN_VG_NAME}-${DCN_HOST_NAME}_${DCN_LV_NAME} \
			${DCN_MNTPOINT} ${DCN_FSTYPE} defaults,noatime 0 2"

	done ) | column -t > ${DCN_PREFIX}/etc/fstab
}

###############################################################################
# unmount filesystems
#

dcn_umount()
{
	DCN_PREFIX=/target

	swapoff -a

	MOUNTS=`mount | awk '{ print $3 }' | grep $DCN_PREFIX | sort -r`
	for i in ${MOUNTS}; do
		echo "Unmounting ${i} ..."
		umount -v ${i}
	done
}

###############################################################################
# deactivate lvm (physical volumes, volume group, and logical volumes)
#

dcn_lvm_deactivate()
{
	vgchange -an ${DCN_VG_NAME}
}

###############################################################################
# destroy lvm (physical volumes, volume group, and logical volumes)
#

dcn_lvm_destroy()
{
	dcn_lvm_deactivate

	lvremove ${DCN_VG_NAME}
	vgremove ${DCN_VG_NAME}
	pvremove /dev/mapper/${DCN_DISK}2_crypt
}

###############################################################################
# main part
#

case "${1}" in
	usage)
		dcn_usage
		exit 0
		;;
	config)
		dcn_config
		exit 0
		;;
	prereq)
		dcn_prereq
		exit 0
		;;
	partition)
		dcn_partition
		exit 0
		;;
	crypt)
		dcn_crypt
		exit 0
		;;
	lvm_create)
		dcn_lvm_create
		exit 0
		;;
	mkfs)
		dcn_mkfs
		exit 0
		;;
	mount)
		dcn_mount
		exit 0
		;;
	bootstrap)
		dcn_bootstrap
		exit 0
		;;
	tabsetup)
		dcn_tabsetup
		exit 0
		;;
	umount)
		dcn_umount
		exit 0
		;;
	lvm_deactivate)
		dcn_lvm_deactivate
		exit 0
		;;
	lvm_destroy)
		dcn_lvm_destroy
		exit 0
		;;
	*)
		dcn_usage
		exit 0
		;;
esac

